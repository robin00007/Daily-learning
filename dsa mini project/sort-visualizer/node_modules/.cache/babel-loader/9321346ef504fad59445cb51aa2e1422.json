{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Robin\\\\OneDrive\\\\Desktop\\\\daily-learning\\\\dsa mini project\\\\sort-visualizer\\\\src\\\\algorithms\\\\ShellSort.js\";\nimport React from 'react';\nimport { swap, newTrace, addToTrace, createRange, createKey } from './helpers';\n\nconst ShellSort = nums => {\n  const trace = newTrace(nums);\n\n  for (let gap = Math.floor(nums.length / 2); gap > 0; gap = Math.floor(gap / 2)) {\n    for (let j = gap; j < nums.length; j++) {\n      for (let i = j - gap; i >= 0; i -= gap) {\n        addToTrace(trace, nums, [], [i, i + gap]);\n\n        if (nums[i + gap] < nums[i]) {\n          addToTrace(trace, nums, [], [], [i, i + gap]);\n          swap(nums, i, i + gap);\n          addToTrace(trace, nums, [], [], [i, i + gap]);\n        } else {\n          break;\n        }\n      }\n    }\n  }\n\n  addToTrace(trace, nums, createRange(0, nums.length));\n  return trace;\n};\n\nexport const ShellSortKey = createKey('Comparing', 'Swapping');\nexport const ShellSortDesc = {\n  title: 'Shell Sort',\n  description: /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    href: \"https://en.wikipedia.org/wiki/Shellsort\",\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, \"Shell Sort\"), \", also know as Shell's method is a generalization of insertion sort where elements \", /*#__PURE__*/React.createElement(\"em\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 29\n    }\n  }, \"gap\"), \" distance apart are compared rather than adjacent elements. The method starts by sorting pairs of elements far apart from each other, then progressively reducing the gap between elements to be compared. Starting with far apart elements, it can move some out-of-place elements into position faster than a simple nearest neighbor exchange. The running time of Shellsort is heavily dependent on the gap sequence it uses. For many practical variants, determining their time complexity remains an open problem. It is in-place sorting algorithm that is not stable.\")),\n  worstCase: /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, \"O(\", /*#__PURE__*/React.createElement(\"em\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, \"n\"), /*#__PURE__*/React.createElement(\"sup\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, \"2\"), \")\"),\n  avgCase: /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  }, \"O(\", /*#__PURE__*/React.createElement(\"em\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, \"n\"), /*#__PURE__*/React.createElement(\"sup\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, \"3/2\"), \")\"),\n  bestCase: /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }, \"O(\", /*#__PURE__*/React.createElement(\"em\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, \"n\"), \" log \", /*#__PURE__*/React.createElement(\"em\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 24\n    }\n  }, \"n\"), \")\"),\n  space: /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 10\n    }\n  }, \"O(1)\")\n};\nexport default ShellSort;","map":{"version":3,"names":["React","swap","newTrace","addToTrace","createRange","createKey","ShellSort","nums","trace","gap","Math","floor","length","j","i","ShellSortKey","ShellSortDesc","title","description","worstCase","avgCase","bestCase","space"],"sources":["C:/Users/Robin/OneDrive/Desktop/daily-learning/dsa mini project/sort-visualizer/src/algorithms/ShellSort.js"],"sourcesContent":["import React from 'react';\r\nimport {\r\n  swap,\r\n  newTrace,\r\n  addToTrace,\r\n  createRange,\r\n  createKey\r\n} from './helpers';\r\n\r\nconst ShellSort = (nums) => {\r\n  const trace = newTrace(nums);\r\n\r\n  for (\r\n    let gap = Math.floor(nums.length / 2);\r\n    gap > 0;\r\n    gap = Math.floor(gap / 2)\r\n  ) {\r\n    for (let j = gap; j < nums.length; j++) {\r\n      for (let i = j - gap; i >= 0; i -= gap) {\r\n        addToTrace(trace, nums, [], [i, i + gap]);\r\n        if (nums[i + gap] < nums[i]) {\r\n          addToTrace(trace, nums, [], [], [i, i + gap]);\r\n          swap(nums, i, i + gap);\r\n          addToTrace(trace, nums, [], [], [i, i + gap]);\r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  addToTrace(trace, nums, createRange(0, nums.length));\r\n  return trace;\r\n};\r\n\r\nexport const ShellSortKey = createKey('Comparing', 'Swapping');\r\n\r\nexport const ShellSortDesc = {\r\n  title: 'Shell Sort',\r\n  description: (\r\n    <div>\r\n      <p>\r\n        <a\r\n          href=\"https://en.wikipedia.org/wiki/Shellsort\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Shell Sort\r\n        </a>\r\n        , also know as Shell's method is a generalization of insertion\r\n        sort where elements <em>gap</em> distance apart are compared\r\n        rather than adjacent elements. The method starts by sorting\r\n        pairs of elements far apart from each other, then progressively\r\n        reducing the gap between elements to be compared. Starting with\r\n        far apart elements, it can move some out-of-place elements into\r\n        position faster than a simple nearest neighbor exchange. The\r\n        running time of Shellsort is heavily dependent on the gap\r\n        sequence it uses. For many practical variants, determining their\r\n        time complexity remains an open problem. It is in-place sorting\r\n        algorithm that is not stable.\r\n      </p>\r\n    </div>\r\n  ),\r\n  worstCase: (\r\n    <span>\r\n      O(<em>n</em>\r\n      <sup>2</sup>)\r\n    </span>\r\n  ),\r\n  avgCase: (\r\n    <span>\r\n      O(<em>n</em>\r\n      <sup>3/2</sup>)\r\n    </span>\r\n  ),\r\n  bestCase: (\r\n    <span>\r\n      O(<em>n</em> log <em>n</em>)\r\n    </span>\r\n  ),\r\n  space: <span>O(1)</span>\r\n};\r\n\r\nexport default ShellSort;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}