{"ast":null,"code":"export const newTrace = array => {\n  return [{\n    array: [...array],\n    groupA: [],\n    groupB: [],\n    groupC: [],\n    groupD: [],\n    sortedIndices: []\n  }];\n};\nexport const addToTrace = function (trace, array) {\n  let sortedIndices = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  let groupA = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  let groupB = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n  let groupC = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];\n  let groupD = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : [];\n  trace.push({\n    array: [...array],\n    groupA: [...groupA],\n    groupB: [...groupB],\n    groupC: [...groupC],\n    groupD: [...groupD],\n    sortedIndices: [...sortedIndices]\n  });\n};\nexport const lastSorted = trace => {\n  return trace[trace.length - 1].sortedIndices;\n};\nexport const swap = (array, i, j) => {\n  const tmp = array[i];\n  array[i] = array[j];\n  array[j] = tmp;\n};\nexport const createRange = (start, end) => {\n  return [...Array(end - start).keys()].map(elem => elem + start);\n};\nexport const createKey = (groupA, groupB, groupC, groupD) => {\n  return {\n    groupA,\n    groupB,\n    groupC,\n    groupD\n  };\n};","map":{"version":3,"names":["newTrace","array","groupA","groupB","groupC","groupD","sortedIndices","addToTrace","trace","push","lastSorted","length","swap","i","j","tmp","createRange","start","end","Array","keys","map","elem","createKey"],"sources":["C:/Users/Robin/OneDrive/Desktop/daily-learning/dsa mini project/sort-visualizer/src/algorithms/helpers.js"],"sourcesContent":["export const newTrace = (array) => {\r\n  return [\r\n    {\r\n      array: [...array],\r\n      groupA: [],\r\n      groupB: [],\r\n      groupC: [],\r\n      groupD: [],\r\n      sortedIndices: []\r\n    }\r\n  ];\r\n};\r\n\r\nexport const addToTrace = (\r\n  trace,\r\n  array,\r\n  sortedIndices = [],\r\n  groupA = [],\r\n  groupB = [],\r\n  groupC = [],\r\n  groupD = []\r\n) => {\r\n  trace.push({\r\n    array: [...array],\r\n    groupA: [...groupA],\r\n    groupB: [...groupB],\r\n    groupC: [...groupC],\r\n    groupD: [...groupD],\r\n    sortedIndices: [...sortedIndices]\r\n  });\r\n};\r\n\r\nexport const lastSorted = (trace) => {\r\n  return trace[trace.length - 1].sortedIndices;\r\n};\r\n\r\nexport const swap = (array, i, j) => {\r\n  const tmp = array[i];\r\n  array[i] = array[j];\r\n  array[j] = tmp;\r\n};\r\n\r\nexport const createRange = (start, end) => {\r\n  return [...Array(end - start).keys()].map((elem) => elem + start);\r\n};\r\n\r\nexport const createKey = (groupA, groupB, groupC, groupD) => {\r\n  return { groupA, groupB, groupC, groupD };\r\n};\r\n"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAIC,KAAD,IAAW;EACjC,OAAO,CACL;IACEA,KAAK,EAAE,CAAC,GAAGA,KAAJ,CADT;IAEEC,MAAM,EAAE,EAFV;IAGEC,MAAM,EAAE,EAHV;IAIEC,MAAM,EAAE,EAJV;IAKEC,MAAM,EAAE,EALV;IAMEC,aAAa,EAAE;EANjB,CADK,CAAP;AAUD,CAXM;AAaP,OAAO,MAAMC,UAAU,GAAG,UACxBC,KADwB,EAExBP,KAFwB,EAQrB;EAAA,IALHK,aAKG,uEALa,EAKb;EAAA,IAJHJ,MAIG,uEAJM,EAIN;EAAA,IAHHC,MAGG,uEAHM,EAGN;EAAA,IAFHC,MAEG,uEAFM,EAEN;EAAA,IADHC,MACG,uEADM,EACN;EACHG,KAAK,CAACC,IAAN,CAAW;IACTR,KAAK,EAAE,CAAC,GAAGA,KAAJ,CADE;IAETC,MAAM,EAAE,CAAC,GAAGA,MAAJ,CAFC;IAGTC,MAAM,EAAE,CAAC,GAAGA,MAAJ,CAHC;IAITC,MAAM,EAAE,CAAC,GAAGA,MAAJ,CAJC;IAKTC,MAAM,EAAE,CAAC,GAAGA,MAAJ,CALC;IAMTC,aAAa,EAAE,CAAC,GAAGA,aAAJ;EANN,CAAX;AAQD,CAjBM;AAmBP,OAAO,MAAMI,UAAU,GAAIF,KAAD,IAAW;EACnC,OAAOA,KAAK,CAACA,KAAK,CAACG,MAAN,GAAe,CAAhB,CAAL,CAAwBL,aAA/B;AACD,CAFM;AAIP,OAAO,MAAMM,IAAI,GAAG,CAACX,KAAD,EAAQY,CAAR,EAAWC,CAAX,KAAiB;EACnC,MAAMC,GAAG,GAAGd,KAAK,CAACY,CAAD,CAAjB;EACAZ,KAAK,CAACY,CAAD,CAAL,GAAWZ,KAAK,CAACa,CAAD,CAAhB;EACAb,KAAK,CAACa,CAAD,CAAL,GAAWC,GAAX;AACD,CAJM;AAMP,OAAO,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,GAAR,KAAgB;EACzC,OAAO,CAAC,GAAGC,KAAK,CAACD,GAAG,GAAGD,KAAP,CAAL,CAAmBG,IAAnB,EAAJ,EAA+BC,GAA/B,CAAoCC,IAAD,IAAUA,IAAI,GAAGL,KAApD,CAAP;AACD,CAFM;AAIP,OAAO,MAAMM,SAAS,GAAG,CAACrB,MAAD,EAASC,MAAT,EAAiBC,MAAjB,EAAyBC,MAAzB,KAAoC;EAC3D,OAAO;IAAEH,MAAF;IAAUC,MAAV;IAAkBC,MAAlB;IAA0BC;EAA1B,CAAP;AACD,CAFM"},"metadata":{},"sourceType":"module"}