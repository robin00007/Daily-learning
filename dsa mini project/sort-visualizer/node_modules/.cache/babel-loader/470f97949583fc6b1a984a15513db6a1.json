{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Robin\\\\OneDrive\\\\Desktop\\\\daily-learning\\\\dsa mini project\\\\sort-visualizer\\\\src\\\\algorithms\\\\InsertionSort.js\";\nimport React from 'react';\nimport { newTrace, addToTrace, createKey } from './helpers';\n\nconst InsertionSort = nums => {\n  // Initial State\n  const trace = newTrace(nums); // Core Algorithm\n\n  for (let i = 1; i < nums.length; i++) {\n    let value = nums[i];\n    let hole = i; // Visualize: Hole has been selected for comparison\n\n    addToTrace(trace, nums, [], [i]);\n\n    while (hole > 0 && nums[hole - 1] > value) {\n      // Visualize: Compare hole to value\n      addToTrace(trace, nums, [], [hole], [hole - 1]);\n      nums[hole] = nums[hole - 1];\n      hole -= 1; // Visualize: Overwrite hole with hole - 1\n\n      addToTrace(trace, nums, [], [], [hole, hole + 1]);\n    } // Visualize: Overwrite hole with value\n\n\n    addToTrace(trace, nums, [], [], [], [hole]);\n    nums[hole] = value; // Visualize: value is in sorted position\n\n    addToTrace(trace, nums, [], [], [], [hole]);\n  } // Visualize: Mark all elements as sorted\n\n\n  addToTrace(trace, nums, [...Array(nums.length).keys()]);\n  return trace;\n};\n\nexport const InsertionSortKey = createKey('Comparing', 'Swapping', 'Overwrite from memory');\nexport const InsertionSortDesc = {\n  title: 'Insertion Sort',\n  description: /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    href: \"https://en.wikipedia.org/wiki/Insertion_sort\",\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, \"Insertion Sort\"), ' ', \"is a simple sorting algorithm that iterates through an array and at each iteration it removes one element from the array, finds the location it belongs to in the sorted list and inserts it there, repeating until no elements remain in the unsorted list. It is an in-place, stable sorting algorithm that is inefficient on large input arrays but works well for data sets that are almost sorted. It is more efficient in practice compared to other quadratic sorting algorithms like bubble sort and selection sort.\"),\n  worstCase: /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }, \"O(n\", /*#__PURE__*/React.createElement(\"sup\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 10\n    }\n  }, \"2\"), \")\"),\n  avgCase: /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }, \"O(n\", /*#__PURE__*/React.createElement(\"sup\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 10\n    }\n  }, \"2\"), \")\"),\n  bestCase: /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }, \"O(n)\"),\n  space: /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 10\n    }\n  }, \"O(1)\")\n};\nexport default InsertionSort;","map":{"version":3,"names":["React","newTrace","addToTrace","createKey","InsertionSort","nums","trace","i","length","value","hole","Array","keys","InsertionSortKey","InsertionSortDesc","title","description","worstCase","avgCase","bestCase","space"],"sources":["C:/Users/Robin/OneDrive/Desktop/daily-learning/dsa mini project/sort-visualizer/src/algorithms/InsertionSort.js"],"sourcesContent":["import React from 'react';\r\nimport { newTrace, addToTrace, createKey } from './helpers';\r\n\r\nconst InsertionSort = (nums) => {\r\n  // Initial State\r\n  const trace = newTrace(nums);\r\n\r\n  // Core Algorithm\r\n  for (let i = 1; i < nums.length; i++) {\r\n    let value = nums[i];\r\n    let hole = i;\r\n    // Visualize: Hole has been selected for comparison\r\n    addToTrace(trace, nums, [], [i]);\r\n    while (hole > 0 && nums[hole - 1] > value) {\r\n      // Visualize: Compare hole to value\r\n      addToTrace(trace, nums, [], [hole], [hole - 1]);\r\n      nums[hole] = nums[hole - 1];\r\n      hole -= 1;\r\n      // Visualize: Overwrite hole with hole - 1\r\n      addToTrace(trace, nums, [], [], [hole, hole + 1]);\r\n    }\r\n    // Visualize: Overwrite hole with value\r\n    addToTrace(trace, nums, [], [], [], [hole]);\r\n    nums[hole] = value;\r\n    // Visualize: value is in sorted position\r\n    addToTrace(trace, nums, [], [], [], [hole]);\r\n  }\r\n\r\n  // Visualize: Mark all elements as sorted\r\n  addToTrace(trace, nums, [...Array(nums.length).keys()]);\r\n  return trace;\r\n};\r\n\r\nexport const InsertionSortKey = createKey(\r\n  'Comparing',\r\n  'Swapping',\r\n  'Overwrite from memory'\r\n);\r\nexport const InsertionSortDesc = {\r\n  title: 'Insertion Sort',\r\n  description: (\r\n    <p>\r\n      <a\r\n        href=\"https://en.wikipedia.org/wiki/Insertion_sort\"\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        Insertion Sort\r\n      </a>{' '}\r\n      is a simple sorting algorithm that iterates through an array and\r\n      at each iteration it removes one element from the array, finds the\r\n      location it belongs to in the sorted list and inserts it there,\r\n      repeating until no elements remain in the unsorted list. It is an\r\n      in-place, stable sorting algorithm that is inefficient on large\r\n      input arrays but works well for data sets that are almost sorted.\r\n      It is more efficient in practice compared to other quadratic\r\n      sorting algorithms like bubble sort and selection sort.\r\n    </p>\r\n  ),\r\n  worstCase: (\r\n    <span>\r\n      O(n<sup>2</sup>)\r\n    </span>\r\n  ),\r\n  avgCase: (\r\n    <span>\r\n      O(n<sup>2</sup>)\r\n    </span>\r\n  ),\r\n  bestCase: <span>O(n)</span>,\r\n  space: <span>O(1)</span>\r\n};\r\n\r\nexport default InsertionSort;\r\n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,UAAnB,EAA+BC,SAA/B,QAAgD,WAAhD;;AAEA,MAAMC,aAAa,GAAIC,IAAD,IAAU;EAC9B;EACA,MAAMC,KAAK,GAAGL,QAAQ,CAACI,IAAD,CAAtB,CAF8B,CAI9B;;EACA,KAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAAI,CAACG,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;IACpC,IAAIE,KAAK,GAAGJ,IAAI,CAACE,CAAD,CAAhB;IACA,IAAIG,IAAI,GAAGH,CAAX,CAFoC,CAGpC;;IACAL,UAAU,CAACI,KAAD,EAAQD,IAAR,EAAc,EAAd,EAAkB,CAACE,CAAD,CAAlB,CAAV;;IACA,OAAOG,IAAI,GAAG,CAAP,IAAYL,IAAI,CAACK,IAAI,GAAG,CAAR,CAAJ,GAAiBD,KAApC,EAA2C;MACzC;MACAP,UAAU,CAACI,KAAD,EAAQD,IAAR,EAAc,EAAd,EAAkB,CAACK,IAAD,CAAlB,EAA0B,CAACA,IAAI,GAAG,CAAR,CAA1B,CAAV;MACAL,IAAI,CAACK,IAAD,CAAJ,GAAaL,IAAI,CAACK,IAAI,GAAG,CAAR,CAAjB;MACAA,IAAI,IAAI,CAAR,CAJyC,CAKzC;;MACAR,UAAU,CAACI,KAAD,EAAQD,IAAR,EAAc,EAAd,EAAkB,EAAlB,EAAsB,CAACK,IAAD,EAAOA,IAAI,GAAG,CAAd,CAAtB,CAAV;IACD,CAZmC,CAapC;;;IACAR,UAAU,CAACI,KAAD,EAAQD,IAAR,EAAc,EAAd,EAAkB,EAAlB,EAAsB,EAAtB,EAA0B,CAACK,IAAD,CAA1B,CAAV;IACAL,IAAI,CAACK,IAAD,CAAJ,GAAaD,KAAb,CAfoC,CAgBpC;;IACAP,UAAU,CAACI,KAAD,EAAQD,IAAR,EAAc,EAAd,EAAkB,EAAlB,EAAsB,EAAtB,EAA0B,CAACK,IAAD,CAA1B,CAAV;EACD,CAvB6B,CAyB9B;;;EACAR,UAAU,CAACI,KAAD,EAAQD,IAAR,EAAc,CAAC,GAAGM,KAAK,CAACN,IAAI,CAACG,MAAN,CAAL,CAAmBI,IAAnB,EAAJ,CAAd,CAAV;EACA,OAAON,KAAP;AACD,CA5BD;;AA8BA,OAAO,MAAMO,gBAAgB,GAAGV,SAAS,CACvC,WADuC,EAEvC,UAFuC,EAGvC,uBAHuC,CAAlC;AAKP,OAAO,MAAMW,iBAAiB,GAAG;EAC/BC,KAAK,EAAE,gBADwB;EAE/BC,WAAW,eACT;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACE;IACE,IAAI,EAAC,8CADP;IAEE,MAAM,EAAC,QAFT;IAGE,GAAG,EAAC,qBAHN;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,oBADF,EAOO,GAPP,igBAH6B;EAqB/BC,SAAS,eACP;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,uBACK;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,OADL,MAtB6B;EA0B/BC,OAAO,eACL;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,uBACK;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,OADL,MA3B6B;EA+B/BC,QAAQ,eAAE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,UA/BqB;EAgC/BC,KAAK,eAAE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA;AAhCwB,CAA1B;AAmCP,eAAehB,aAAf"},"metadata":{},"sourceType":"module"}